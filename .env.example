# Environment Configuration Template
# Copy this file to .env and fill in your actual values

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================
ENVIRONMENT=development
DEBUG=true
APP_NAME="RAG User Story Generator"
VERSION=1.0.0
HOST=0.0.0.0
PORT=8000

# =============================================================================
# SECURITY SETTINGS
# =============================================================================
SECRET_KEY=your-super-secret-jwt-key-change-this-in-production-make-it-long-and-random
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=1440

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL
DATABASE_URL=postgresql://rag_user:rag_password@postgres:5432/rag_user_stories
DATABASE_ECHO=false

# Redis
REDIS_URL=redis://:redis_password@redis:6379/0

# Neo4j Knowledge Graph
NEO4J_URI=bolt://neo4j:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=neo4j_password

# =============================================================================
# VECTOR DATABASE SETTINGS
# =============================================================================
VECTOR_DB_TYPE=chromadb
CHROMA_DB_HOST=chromadb
CHROMA_DB_PORT=8000

# If using Pinecone instead of ChromaDB, uncomment and configure:
# PINECONE_API_KEY=your-pinecone-api-key
# PINECONE_ENVIRONMENT=your-pinecone-environment

# =============================================================================
# LLM PROVIDER SETTINGS
# =============================================================================
DEFAULT_LLM_PROVIDER=openai

# OpenAI Configuration
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_MODEL=gpt-4-turbo-preview
OPENAI_TEMPERATURE=0.1

# Azure OpenAI Configuration
AZURE_OPENAI_API_KEY=your-azure-openai-api-key
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
AZURE_OPENAI_DEPLOYMENT_NAME=your-deployment-name
AZURE_OPENAI_API_VERSION=2024-02-15-preview

# Anthropic Claude Configuration
CLAUDE_API_KEY=sk-ant-your-claude-api-key
CLAUDE_MODEL=claude-3-sonnet-20240229

# Google Gemini Configuration
GEMINI_API_KEY=your-gemini-api-key
GEMINI_MODEL=gemini-pro

# Ollama (Local Models) Configuration
OLLAMA_BASE_URL=http://ollama:11434
OLLAMA_MODEL=llama2

# =============================================================================
# EXTERNAL INTEGRATIONS
# =============================================================================

# Jira Integration
JIRA_SERVER_URL=https://your-company.atlassian.net
JIRA_USERNAME=your-email@company.com
JIRA_API_TOKEN=your-jira-api-token

# Confluence Integration
CONFLUENCE_SERVER_URL=https://your-company.atlassian.net/wiki
CONFLUENCE_USERNAME=your-email@company.com
CONFLUENCE_API_TOKEN=your-confluence-api-token

# SharePoint Integration
SHAREPOINT_TENANT_ID=your-tenant-id
SHAREPOINT_CLIENT_ID=your-client-id
SHAREPOINT_CLIENT_SECRET=your-client-secret
SHAREPOINT_SITE_URL=https://yourcompany.sharepoint.com/sites/yoursite

# =============================================================================
# FILE PROCESSING SETTINGS
# =============================================================================
MAX_FILE_SIZE=52428800
ALLOWED_FILE_EXTENSIONS=.pdf,.docx,.txt,.md,.xlsx,.csv
UPLOAD_DIR=./data/uploads

# Text Processing
CHUNK_SIZE=1000
CHUNK_OVERLAP=200

# RAG Settings
RETRIEVAL_TOP_K=10
RERANK_TOP_K=5

# =============================================================================
# BACKGROUND TASKS (CELERY)
# =============================================================================
CELERY_BROKER_URL=redis://:redis_password@redis:6379/1
CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/2

# =============================================================================
# LOGGING SETTINGS
# =============================================================================
LOG_LEVEL=INFO
LOG_FILE=app.log

# =============================================================================
# CORS SETTINGS
# =============================================================================
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://frontend:3000

# =============================================================================
# FRONTEND SETTINGS
# =============================================================================
REACT_APP_API_URL=http://localhost:8001
REACT_APP_WS_URL=ws://localhost:8001
REACT_APP_VERSION=1.0.0

# =============================================================================
# MONITORING & OBSERVABILITY
# =============================================================================
# Sentry (Error Tracking)
# SENTRY_DSN=your-sentry-dsn

# Prometheus Metrics
PROMETHEUS_ENABLED=true

# =============================================================================
# PRODUCTION OVERRIDES
# =============================================================================
# Uncomment and modify these for production deployment

# ENVIRONMENT=production
# DEBUG=false
# LOG_LEVEL=WARNING
# DATABASE_URL=postgresql://prod_user:secure_password@prod-db:5432/rag_prod_db?sslmode=require
# REDIS_URL=redis://prod-redis:6379/0
# SECRET_KEY=your-extremely-secure-production-secret-key
# ALLOWED_ORIGINS=https://yourdomain.com,https://app.yourdomain.com

# =============================================================================
# DEVELOPMENT HELPERS
# =============================================================================
# These are only used in development mode

# Enable SQL query logging
# DATABASE_ECHO=true

# Enable more verbose logging
# LOG_LEVEL=DEBUG

# Auto-reload on code changes
# UVICORN_RELOAD=true

# =============================================================================
# NOTES
# =============================================================================
# 1. Never commit this file with real API keys to version control
# 2. Use a secrets management system in production (AWS Secrets Manager, etc.)
# 3. Rotate API keys regularly
# 4. Use strong, unique passwords for all services
# 5. Enable SSL/TLS in production
# 6. Consider using environment-specific .env files (.env.development, .env.production)
# 7. For Kubernetes deployment, use ConfigMaps and Secrets instead of .env files