version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rag-postgres
    environment:
      POSTGRES_DB: rag_user_stories
      POSTGRES_USER: rag_user
      POSTGRES_PASSWORD: rag_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - rag-network
    restart: unless-stopped

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: rag-redis
    command: redis-server --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rag-network
    restart: unless-stopped

  # Neo4j Knowledge Graph Database
  neo4j:
    image: neo4j:5.13-community
    container_name: rag-neo4j
    environment:
      NEO4J_AUTH: neo4j/neo4j_password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: 'true'
      NEO4J_apoc_import_file_enabled: 'true'
      NEO4J_apoc_import_file_use__neo4j__config: 'true'
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - rag-network
    restart: unless-stopped

  # ChromaDB Vector Database
  chromadb:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: rag-chromadb
    ports:
      - "8000:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    networks:
      - rag-network
    restart: unless-stopped

  # Ollama for Local LLM Models
  ollama:
    image: ollama/ollama:latest
    container_name: rag-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - rag-network
    restart: unless-stopped
    # Uncomment if you have NVIDIA GPU
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Backend FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rag-backend
    environment:
      # Database
      DATABASE_URL: postgresql://rag_user:rag_password@postgres:5432/rag_user_stories
      
      # Redis
      REDIS_URL: redis://:redis_password@redis:6379/0
      
      # Neo4j
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: neo4j_password
      
      # ChromaDB
      CHROMA_DB_HOST: chromadb
      CHROMA_DB_PORT: 8000
      
      # Ollama
      OLLAMA_BASE_URL: http://ollama:11434
      
      # Security
      SECRET_KEY: your-super-secret-jwt-key-change-in-production
      
      # LLM APIs (Add your API keys)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
      AZURE_OPENAI_DEPLOYMENT_NAME: ${AZURE_OPENAI_DEPLOYMENT_NAME}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      
      # External Integrations
      JIRA_SERVER_URL: ${JIRA_SERVER_URL}
      JIRA_USERNAME: ${JIRA_USERNAME}
      JIRA_API_TOKEN: ${JIRA_API_TOKEN}
      CONFLUENCE_SERVER_URL: ${CONFLUENCE_SERVER_URL}
      CONFLUENCE_USERNAME: ${CONFLUENCE_USERNAME}
      CONFLUENCE_API_TOKEN: ${CONFLUENCE_API_TOKEN}
      
      # Application
      DEBUG: "true"
      ENVIRONMENT: development
      
    ports:
      - "8001:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - neo4j
      - chromadb
    networks:
      - rag-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for databases to be ready...' &&
        sleep 10 &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Starting FastAPI server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rag-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8001
      - REACT_APP_WS_URL=ws://localhost:8001
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - rag-network
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rag-celery-worker
    environment:
      # Same environment as backend
      DATABASE_URL: postgresql://rag_user:rag_password@postgres:5432/rag_user_stories
      REDIS_URL: redis://:redis_password@redis:6379/0
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: neo4j_password
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      CELERY_BROKER_URL: redis://:redis_password@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:redis_password@redis:6379/2
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - rag-network
    restart: unless-stopped
    command: celery -A app.main.celery worker --loglevel=info

  # Celery Flower for Task Monitoring
  celery-flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rag-celery-flower
    environment:
      CELERY_BROKER_URL: redis://:redis_password@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:redis_password@redis:6379/2
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - celery-worker
    networks:
      - rag-network
    restart: unless-stopped
    command: celery -A app.main.celery flower --host=0.0.0.0 --port=5555

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: rag-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - rag-network
    restart: unless-stopped
    profiles:
      - production

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: rag-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - rag-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: rag-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - rag-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  rag-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  chromadb_data:
  ollama_data:
  backend_uploads:
  backend_logs:
  nginx_logs:
  prometheus_data:
  grafana_data: